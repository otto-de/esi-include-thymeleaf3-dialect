apply plugin: 'maven'
apply plugin: 'java'
apply plugin: 'idea'

archivesBaseName = 'esiinclude-thymeleaf-dialect'

// Major Release: X.0.0: Breaking Changes
// Minor Release: 0.X.0: Additional Features, updates from minor releases in edison
// Micro Release: 0.0.X: Bugfixes, non-breaking changes, updates from micro releases in edison
// DO NOT FORGET TO DOCUMENT CHANGES IN README.MD
ext.pomVersion = '0.0.3'

repositories {
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}

configurations.all {
    // check for updates every build
    // resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    exclude group: "org.slf4j", module: "slf4j-log4j12"
    exclude group: "log4j", module: "log4j"
    exclude module: "spring-boot-starter-tomcat"
}

ext.libraries = [
    thymeleaf2: [
	'org.thymeleaf:thymeleaf:2.1.5.RELEASE'
    ],
    thymeleaf3 : [
        'org.thymeleaf:thymeleaf:3.0.2.RELEASE',
        'org.thymeleaf:thymeleaf-spring4:3.0.2.RELEASE',
        'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:2.1.0'
    ]
]

dependencies {
    compileOnly libraries.thymeleaf3
    compileOnly group:'com.ning', name: 'async-http-client', version:'1.9.33'

    compile group: 'org.springframework', name: 'spring-context', version: '4.3.4.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version: '4.3.4.RELEASE'
    compile group: 'org.springframework.boot', name: 'spring-boot-autoconfigure', version: '1.4.2.RELEASE'
    testCompile group: 'junit', name: 'junit', version: '4.11'

    testCompile libraries.thymeleaf3
    testCompile "org.mockito:mockito-core:1.10.19"
    testCompile "org.hamcrest:hamcrest-core:1.3"
    testCompile "org.hamcrest:hamcrest-library:1.3"
}

jar {
    manifest.attributes provider: 'gradle'
}

idea.project {
    jdkName = "1.8"
    languageLevel = "1.8"
    ipr.withXml { provider ->
        provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping.@vcs = 'Git'
    }
}

tasks.processResources << {
    def resourcesDir = project.sourceSets.main.output.resourcesDir
    resourcesDir.mkdirs()

    def versionProperties = new File(resourcesDir, "version.properties")
    if (versionProperties) {
        def gitVersion = runCommand("git log -n 1 --format=format:%H")
        def fullVersion = fullyQualifiedVersion()
        versionProperties.text = "\nbuild.commit = ${gitVersion}" + "\nbuild.version = ${fullVersion}"
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

install {
    repositories.mavenInstaller {
        pom.artifactId = archivesBaseName
        pom.groupId = 'de.otto'
        pom.version = pomVersion
    }
}


